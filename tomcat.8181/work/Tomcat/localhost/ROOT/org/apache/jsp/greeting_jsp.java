/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2024-05-09 07:24:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class greeting_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    String name = request.getParameter("n");
    int age = Integer.parseInt(request.getParameter("a"));

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("    <head>\r\n");
      out.write("        <meta charset=\"UTF-8\" />\r\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("        <title>Document</title>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("\r\n");
      out.write("        ");
 for(int i = 0; i < 3; i++) { 
      out.write("\r\n");
      out.write("        <p>\r\n");
      out.write("            국회는 정부의 동의없이 정부가 제출한 지출예산 각항의 금액을\r\n");
      out.write("            증가하거나 새 비목을 설치할 수 없다.\r\n");
      out.write("        </p>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("        <h1>");
      out.print( name );
      out.write(',');
      out.write(' ');
      out.print( age );
      out.write("살!</h1>\r\n");
      out.write("        <p>\r\n");
      out.write("            공무원의 신분과 정치적 중립성은 법률이 정하는 바에 의하여 보장된다.\r\n");
      out.write("        </p>\r\n");
      out.write("\r\n");
      out.write("        <p>\r\n");
      out.write("            국회의원의 선거구와 비례대표제 기타 선거에 관한 사항은 법률로\r\n");
      out.write("            정한다.\r\n");
      out.write("        </p>\r\n");
      out.write("\r\n");
      out.write("        <p>\r\n");
      out.write("            대통령·국무총리·국무위원·행정각부의 장·헌법재판소\r\n");
      out.write("            재판관·법관·중앙선거관리위원회 위원·감사원장·감사위원 기타 법률이\r\n");
      out.write("            정한 공무원이 그 직무집행에 있어서 헌법이나 법률을 위배한 때에는\r\n");
      out.write("            국회는 탄핵의 소추를 의결할 수 있다.\r\n");
      out.write("        </p>\r\n");
      out.write("\r\n");
      out.write("        <p>\r\n");
      out.write("            사법권은 법관으로 구성된 법원에 속한다. 국가는 청원에 대하여 심사할\r\n");
      out.write("            의무를 진다.\r\n");
      out.write("        </p>\r\n");
      out.write("\r\n");
      out.write("        <p>\r\n");
      out.write("            국회의원이 회기전에 체포 또는 구금된 때에는 현행범인이 아닌 한\r\n");
      out.write("            국회의 요구가 있으면 회기중 석방된다.\r\n");
      out.write("        </p>\r\n");
      out.write("\r\n");
      out.write("        <p>\r\n");
      out.write("            모든 국민은 건강하고 쾌적한 환경에서 생활할 권리를 가지며, 국가와\r\n");
      out.write("            국민은 환경보전을 위하여 노력하여야 한다.\r\n");
      out.write("        </p>\r\n");
      out.write("\r\n");
      out.write("        <p>\r\n");
      out.write("            국무총리는 국회의 동의를 얻어 대통령이 임명한다. 훈장등의 영전은\r\n");
      out.write("            이를 받은 자에게만 효력이 있고, 어떠한 특권도 이에 따르지 아니한다.\r\n");
      out.write("        </p>\r\n");
      out.write("\r\n");
      out.write("        <p>\r\n");
      out.write("            명령·규칙 또는 처분이 헌법이나 법률에 위반되는 여부가 재판의 전제가\r\n");
      out.write("            된 경우에는 대법원은 이를 최종적으로 심사할 권한을 가진다.\r\n");
      out.write("        </p>\r\n");
      out.write("\r\n");
      out.write("        <p>\r\n");
      out.write("            이 헌법시행 당시의 법령과 조약은 이 헌법에 위배되지 아니하는 한 그\r\n");
      out.write("            효력을 지속한다.\r\n");
      out.write("        </p>\r\n");
      out.write("        <script>\r\n");
      out.write("            const $pList = document.querySelectorAll(\"p\");\r\n");
      out.write("            let i = 1;\r\n");
      out.write("            $pList.forEach(($p) => {\r\n");
      out.write("                if (i % 3 === 1) {\r\n");
      out.write("                    $p.style.color = \"red\";\r\n");
      out.write("                } else if (i % 3 === 2) {\r\n");
      out.write("                    $p.style.color = \"green\";\r\n");
      out.write("                } else {\r\n");
      out.write("                    $p.style.color = \"blue\";\r\n");
      out.write("                }\r\n");
      out.write("                i++;\r\n");
      out.write("            });\r\n");
      out.write("            const $h1 = document.querySelector(\"h1\");\r\n");
      out.write("            $h1.style.color = \"#ff8342\";\r\n");
      out.write("            $h1.style.fontSize = \"55px\";\r\n");
      out.write("        </script>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
